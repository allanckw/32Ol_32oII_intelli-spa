106
cat: All Category
1 - Tuple :: Follows
stmt s1, s2, s3, s4;
Select <s1, s2> such that Follows(s1, s2)

5000
2 - Multiple :: Follows
stmt s1, s2, s3, s4;
Select s1 such that Follows(s1, s2) and Follows(s3, s4)

5000
3 - Multiple :: Follows
stmt s1, s2, s3, s4, s5;
Select s3 such that Follows(s1, s2) and Follows(s2, s3) and Follows(s3, s4) and Follows(s4, s5)

5000
4 - Tuple :: Follows
stmt s1, s2, s3, s4;
Select <s1, s4> such that Follows(s1, s2) and Follows(s2, s3) and Follows(s3, s4)

5000
5 - Tuple :: Follows
assign a1, a2;
Select <a1, a2> such that Follows(a1, a2)

5000
6 - Multiple :: Follows
assign a1, a2, a3, a4;
Select a1 such that Follows(a1, a2) and Follows(a3, a4)

5000
7 - Multiple :: Follows
assign a1, a2, a3, a4, a5;
Select a2 such that Follows(a1, a2) and Follows(a2, a3) and Follows(a3, a4) and Follows(a4, a5)

5000
8 - Tuple :: Follows
assign a1, a2, a3, a4;
Select <a1, a4> such that Follows(a1, a2) and Follows(a2, a3) and Follows(a3, a4)

5000
9 - Multiple :: Follows
while w1, w2; assign a;
Select a such that Follows(w1, a) and Follows(a, w2)

5000
10 - Tuple :: Follows
assign a1, a2, a3, a4;
Select <a1, a4> such that Follows(a1, a2) and Follows(a2, a3) and Follows(a3, a4)

5000
11 - Tuple :: Follows
while w; if iff;
Select <w, iff> such that Follows(w, iff)

5000
12 - Tuple :: Follows*
stmt s1, s2, s3, s4;
Select <s1, s2> such that Follows*(s1, s2)

5000
13 - Multiple :: Follows*
stmt s1, s2, s3, s4;
Select s1 such that Follows*(s1, s2) and Follows*(s3, s4)

5000
14 - Multiple :: Follows*
stmt s1, s2, s3, s4, s5;
Select s3 such that Follows*(s1, s2) and Follows*(s2, s3) and Follows*(s3, s4) and Follows*(s4, s5)

5000
15 - Tuple :: Follows*
stmt s1, s2, s3, s4;
Select <s1, s4> such that Follows*(s1, s2) and Follows*(s2, s3) and Follows*(s3, s4)

5000
16 - Tuple :: Follows*
assign a1, a2;
Select <a1, a2> such that Follows*(a1, a2)

5000
17 - Multiple :: Follows*
assign a1, a2, a3, a4;
Select a1 such that Follows*(a1, a2) and Follows*(a3, a4)

5000
18 - Multiple :: Follows*
assign a1, a2, a3, a4, a5;
Select a2 such that Follows*(a1, a2) and Follows*(a2, a3) and Follows*(a3, a4) and Follows*(a4, a5)

5000
19 - Tuple :: Follows*
assign a1, a2, a3, a4;
Select <a1, a4> such that Follows*(a1, a2) and Follows*(a2, a3) and Follows*(a3, a4)

5000
20 - Multiple :: Follows*
while w1, w2; assign a;
Select a such that Follows*(w1, a) and Follows*(a, w2)

5000
21 - Tuple :: Follows*
assign a1, a2, a3, a4;
Select <a1, a4> such that Follows*(a1, a2) and Follows*(a2, a3) and Follows*(a3, a4)

5000
22 - Tuple :: Follows*
while w; if iff;
Select <w, iff> such that Follows*(w, iff)

5000
23 - Tuple :: Follows
assign a1, a2; call c;
Select <a1, a2> such that Follows*(a1, c) and Follows*(c, a2)

5000
24 - Tuple :: Follows
assign a1, a2; while w;
Select <a1, a2> such that Follows*(a1, w) and Follows(w, a2)

5000
25 - Tuple :: Follows
assign a1, a2; if iff;
Select <a1, a2> such that Follows*(a1, iff) and Follows(iff, a2)

5000
26 - Multiple :: Follows
stmt s1, s2, s3, s4, s5, s6, s7, s8;
Select s1 such that Follows*(s1, s2) and Follows(s1, s3) and Follows*(s1, s4) and Follows(s1, s5) and Follows(s1, s6) and Follows*(s1, s7) and Follows(s1, s8)

5000
27 - Multiple :: Follows
stmt s1, s2, s3, s4, s5, s6, s7, s8;
Select s1 such that Follows*(s1, s2) and Follows(s2, s3) and Follows*(s3, s4) and Follows(s4, s5) and Follows(s5, s6) and Follows*(s6, s7) and Follows(s7, s8) and Follows*(s8, s1)

5000
28 - Multiple :: Follows
stmt s1, s2, s3, s4, s5, s6, s7, s8;
Select <s1, s4, s5, s8> such that Follows*(s1, s2) and Follows*(s3, s4) and Follows(s5, s6) and Follows(s7, s8)

5000
29 - Multiple :: Follows
stmt s1, s2, s3;
Select s1 such that Follows*(s1, s2) and Follows*(s2, s3) with s2.stmt#=8

5000
30 - Multiple :: Follows
stmt s1, s2, s3;
Select s1 such that Follows*(s1, s2) and Follows*(s2, s3) with s2.stmt#=52

5000
31 - Tuple :: Parent
stmt s1, s2, s3, s4;
Select <s1, s2> such that Parent(s1, s2)

5000
32 - Multiple :: Parent
stmt s1, s2, s3, s4;
Select s1 such that Parent(s1, s2) and Parent(s3, s4)

5000
33 - Multiple :: Parent
stmt s1, s2, s3, s4, s5;
Select s3 such that Parent(s1, s2) and Parent(s2, s3) and Parent(s3, s4) and Parent(s4, s5)

5000
34 - Tuple :: Parent
stmt s1, s2, s3, s4;
Select <s1, s4> such that Parent(s1, s2) and Parent(s2, s3) and Parent(s3, s4)

5000
35 - Tuple :: Parent
while w; stmt s;
Select <w, s> such that Parent(w, s)

5000
36 - Multiple :: Parent
while w1, w2; stmt s1, s2;
Select s2 such that Parent(w1, s1) and Parent(w2, s2)

5000
37 - Tuple :: Parent
if iff; stmt s;
Select <iff, s> such that Parent(iff, s)

5000
38 - Multiple :: Parent
if i1, i2; stmt s1, s2;
Select s2 such that Parent(i1, s1) and Parent(i2, s2)

5000
39 - Tuple :: Parent
while w; if iff;
Select <w, iff> such that Parent(w, iff)

5000
40 - Tuple :: Parent*
stmt s1, s2, s3, s4;
Select <s1, s2> such that Parent*(s1, s2)

5000
41 - Multiple :: Parent*
stmt s1, s2, s3, s4;
Select s1 such that Parent*(s1, s2) and Parent*(s3, s4)

5000
42 - Multiple :: Parent*
stmt s1, s2, s3, s4, s5;
Select s3 such that Parent*(s1, s2) and Parent*(s2, s3) and Parent*(s3, s4) and Parent*(s4, s5)

5000
43 - Tuple :: Parent*
stmt s1, s2, s3, s4;
Select <s1, s4> such that Parent*(s1, s2) and Parent*(s2, s3) and Parent*(s3, s4)

5000
44 - Tuple :: Parent*
while w; stmt s;
Select <w, s> such that Parent*(w, s)

5000
45 - Multiple :: Parent*
while w1, w2; stmt s1, s2;
Select s2 such that Parent*(w1, s1) and Parent*(w2, s2)

5000
46 - Tuple :: Parent*
if iff; stmt s;
Select <iff, s> such that Parent*(iff, s)

5000
47 - Multiple :: Parent*
if i1, i2; stmt s1, s2;
Select s2 such that Parent*(i1, s1) and Parent*(i2, s2)

5000
48 - Tuple :: Parent*
while w; if iff;
Select <w, iff> such that Parent*(w, iff)

5000
49 - Multiple :: Parent
stmt s1, s2, s3, s4, s5, s6, s7, s8;
Select <s1, s3, s6, s7> such that Parent*(s1, s2) and Parent(s1, s3) and Parent*(s1, s4) and Parent(s1, s5) and Parent(s1, s6) and Parent*(s1, s7) and Parent(s1, s8)

5000
50 - Multiple :: Parent
stmt s1, s2, s3, s4, s5, s6, s7, s8;
Select s1 such that Parent*(s1, s2) and Parent*(s3, s4) and Parent(s5, s6) and Parent(s7, s8)

5000
51 - Multiple :: Parent
stmt s1, s2, s3;
Select s3 such that Parent*(s1, s2) and Parent*(s2, s3) with s1.stmt#=22

5000
52 - Multiple :: Parent
stmt s1, s2, s3;
Select s3 such that Parent*(s1, s2) and Parent*(s2, s3) with s2.stmt#=44

5000
53 - Multiple :: Modifies
stmt s; variable v;
Select <s, v> such that Modifies(s, v)

5000
54 - Multiple :: Modifies
stmt s1, s2, s3; variable v1, v2, v3;
Select <s1, v1, s2, v3> such that Modifies(s1, v1) and Modifies(s2, v2) and Modifies(s3, v3)

5000
55 - Multiple :: Modifies
stmt s1, s2, s3; variable v1, v2, v3;
Select <s1, v1, s2, s3> such that Modifies(s1, v1) and Modifies(s2, v2) and Modifies(s3, v3) with v2.varName="x"

5000
56 - Multiple :: Modifies
stmt s1, s2, s3; variable v1, v2, v3; constant c;
Select <s1, v1, s2, v3> such that Modifies(s1, v1) and Modifies(s2, v2) and Modifies(s3, v3) with s3.stmt#=c.value

5000
57 - Multiple :: Modifies
stmt s1, s2, s3; variable v1, v2, v3; call c;
Select <s1, v1, s2, v3> such that Modifies(s1, v1) and Modifies(s2, v2) and Modifies(s3, v3) with s1.stmt#=c.value

5000
58 - Multiple :: Modifies
assign a; variable v;
Select <a, v> such that Modifies(a, v)

5000
59 - Multiple :: Modifies
assign a1, a2, a3; variable v1, v2, v3;
Select <a1, v1, a2, v3> such that Modifies(a1, v1) and Modifies(a2, v2) and Modifies(a3, v3)

5000
60 - Multiple :: Modifies
assign a1, a2, a3; variable v1, v2, v3;
Select <a1, v1, a2, a3> such that Modifies(a1, v1) and Modifies(a2, v2) and Modifies(a3, v3) with v2.varName="x"

5000
61 - Multiple :: Modifies
assign a1, a2, a3; variable v1, v2, v3; constant c;
Select <a1, v1, a2, v3> such that Modifies(a1, v1) and Modifies(a2, v2) and Modifies(a3, v3) with a3.stmt#=c.value

5000
62 - Multiple :: Modifies
stmt s; assign a; while w; if iff; call c; proc p; variable vs, va, vw, vi, vc, vp;
Select <s, a, w, if, c, p> such that Modifies(s, vs) and Modifies(a, va) and Modifies(w, vw) and Modifies(iff, vi) and Modifies(c, vc) and Modifies(p, vp)

5000
63 - Multiple :: Modifies
stmt s; assign a; while w; if iff; call c; proc p; variable vs, va, vw, vi, vc, vp;
Select <vs, va, vw, vi, vc, vp> such that Modifies(s, vs) and Modifies(a, va) and Modifies(w, vw) and Modifies(iff, vi) and Modifies(c, vc) and Modifies(p, vp)

5000
64 - Multiple :: Modifies
stmt s; assign a; while w; if iff; call c; proc p; variable vs, va, vw, vi, vc, vp;
Select <s, a, w, if, c, p> such that Modifies(s, "a") and Modifies(a, "b") and Modifies(w, "c") and Modifies(iff, "d") and Modifies(c, "e") and Modifies(p, "m") 

5000
65 - Multiple :: Modifies
stmt s; assign a; while w; if iff; call c; proc p; variable vs, va, vw, vi, vc, vp;
Select <vw, vi, vc, vp> such that Modifies(63, vw) and Modifies(22, vi) and Modifies(21, vc) and Modifies("Two", vp)

5000
66 - Multiple :: Uses
stmt s; variable v;
Select <s, v> such that Uses(s, v)

5000
67 - Multiple :: Uses
stmt s1, s2, s3; variable v1, v2, v3;
Select <s1, v1, s2, v3> such that Uses(s1, v1) and Uses(s2, v2) and Uses(s3, v3)

5000
68 - Multiple :: Uses
stmt s1, s2, s3; variable v1, v2, v3;
Select <s1, v1, s2, s3> such that Uses(s1, v1) and Uses(s2, v2) and Uses(s3, v3) with v2.varName="x"

5000
69 - Multiple :: Uses
stmt s1, s2, s3; variable v1, v2, v3; constant c;
Select <s1, v1, s2, v3> such that Uses(s1, v1) and Uses(s2, v2) and Uses(s3, v3) with s3.stmt#=c.value

5000
70 - Multiple :: Uses
stmt s1, s2, s3; variable v1, v2, v3; call c;
Select <s1, v1, s2, v3> such that Uses(s1, v1) and Uses(s2, v2) and Uses(s3, v3) with s1.stmt#=c.value

5000
71 - Multiple :: Uses
assign a; variable v;
Select <a, v> such that Uses(a, v)

5000
72 - Multiple :: Uses
assign a1, a2, a3; variable v1, v2, v3;
Select <a1, v1, a2, v3> such that Uses(a1, v1) and Uses(a2, v2) and Uses(a3, v3)

5000
73 - Multiple :: Uses
assign a1, a2, a3; variable v1, v2, v3;
Select <a1, v1, a2, a3> such that Uses(a1, v1) and Uses(a2, v2) and Uses(a3, v3) with v2.varName="x"

5000
74 - Multiple :: Uses
assign a1, a2, a3; variable v1, v2, v3; constant c;
Select <a1, v1, a2, v3> such that Uses(a1, v1) and Uses(a2, v2) and Uses(a3, v3) with a3.stmt#=c.value

5000
75 - Multiple :: Uses
stmt s; assign a; while w; if iff; call c; proc p; variable vs, va, vw, vi, vc, vp;
Select <s, a, w, if, c, p> such that Uses(s, vs) and Uses(a, va) and Uses(w, vw) and Uses(iff, vi) and Uses(c, vc) and Uses(p, vp)

5000
76 - Multiple :: Uses
stmt s; assign a; while w; if iff; call c; proc p; variable vs, va, vw, vi, vc, vp;
Select <vs, va, vw, vi, vc, vp> such that Uses(s, vs) and Uses(a, va) and Uses(w, vw) and Uses(iff, vi) and Uses(c, vc) and Uses(p, vp)

5000
77 - Multiple :: Uses
stmt s; assign a; while w; if iff; call c; proc p; variable vs, va, vw, vi, vc, vp;
Select <s, a, w, if, c, p> such that Uses(s, "a") and Uses(a, "b") and Uses(w, "c") and Uses(iff, "d") and Uses(c, "e") and Uses(p, "m") 

5000
78 - Multiple :: Uses
stmt s; assign a; while w; if iff; call c; proc p; variable vs, va, vw, vi, vc, vp;
Select <vw, vi, vc, vp> such that Uses(63, vw) and Uses(22, vi) and Uses(21, vc) and Uses("Two", vp)

5000
79 - Tuple :: Next
stmt s1, s2, s3, s4;
Select <s1, s2> such that Next(s1, s2)

5000
80 - Multiple :: Next
stmt s1, s2, s3, s4;
Select s1 such that Next(s1, s2) and Next(s3, s4)

5000
81 - Multiple :: Next
stmt s1, s2, s3, s4, s5;
Select s3 such that Next(s1, s2) and Next(s2, s3) and Next(s3, s4) and Next(s4, s5)

5000
82 - Tuple :: Next
stmt s1, s2, s3, s4;
Select <s1, s4> such that Next(s1, s2) and Next(s2, s3) and Next(s3, s4)

5000
83 - Tuple :: Next*
stmt s1, s2, s3, s4;
Select <s1, s2> such that Next*(s1, s2)

5000
84 - Multiple :: Next*
stmt s1, s2, s3, s4;
Select s1 such that Next*(s1, s2) and Next*(s3, s4)

5000
85 - Multiple :: Next*
stmt s1, s2, s3, s4, s5;
Select s3 such that Next*(s1, s2) and Next*(s2, s3) and Next*(s3, s4) and Next*(s4, s5)

5000
86 - Tuple :: Next*
stmt s1, s2, s3, s4;
Select <s1, s4> such that Next*(s1, s2) and Next*(s2, s3) and Next*(s3, s4)

5000
87 - Multiple :: Next
stmt s1, s2, s3, s4, s5, s6, s7, s8;
Select s1 such that Next*(s1, s2) and Next(s1, s3) and Next*(s1, s4) and Next(s1, s5) and Next(s1, s6) and Next*(s1, s7) and Next(s1, s8)

5000
88 - Multiple :: Next
stmt s1, s2, s3, s4, s5, s6, s7, s8;
Select s1 such that Next*(s1, s2) and Next(s2, s3) and Next*(s3, s4) and Next(s4, s5) and Next(s5, s6) and Next*(s6, s7) and Next(s7, s8) and Next*(s8, s1)

5000
89 - Multiple :: Next
stmt s1, s2, s3, s4, s5, s6, s7, s8;
Select <s1, s4, s5, s8> such that Next*(s1, s2) and Next*(s3, s4) and Next(s5, s6) and Next(s7, s8)

5000
90 - Multiple :: Next
stmt s1, s2, s3;
Select <s1, s3> such that Next*(s1, s2) and Next*(s2, s3) with s2.stmt#=22

5000
91 - Multiple :: Next
stmt s1, s2, s3;
Select <s1, s3> such that Next*(s1, s2) and Next*(s2, s3) with s2.stmt#=63

5000
92 - Multiple :: Next
stmt s1, s2, s3;
Select s1 such that Next*(s1, s2) and Next*(s2, s1)

5000
93 - Multiple :: Next
stmt s1, s2, s3;
Select s1 such that Next*(s1, s1)

5000
94 - Tuple :: Affects
assign a1, a2, a3, a4;
Select <a1, a2> such that Affects(a1, a2)

5000
95 - Multiple :: Affects
assign a1, a2, a3, a4;
Select a1 such that Affects(a1, a2) and Affects(a3, a4)

5000
96 - Multiple :: Affects
assign a1, a2, a3, a4, a5;
Select a3 such that Affects(a1, a2) and Affects(a2, a3) and Affects(a3, a4) and Affects(a4, a5)

5000
97 - Tuple :: Affects
assign a1, a2, a3, a4;
Select <a1, a4> such that Affects(a1, a2) and Affects(a2, a3) and Affects(a3, a4)

5000
98 - Tuple :: Affects*
assign a1, a2, a3, a4;
Select <a1, a2> such that Affects*(a1, a2)

5000
99 - Multiple :: Affects*
assign a1, a2, a3, a4;
Select a1 such that Affects*(a1, a2) and Affects*(a3, a4)

5000
100 - Multiple :: Affects*
assign a1, a2, a3, a4, a5;
Select a3 such that Affects*(a1, a2) and Affects*(a2, a3) and Affects*(a3, a4) and Affects*(a4, a5)

5000
101 - Tuple :: Affects*
assign a1, a2, a3, a4;
Select <a1, a4> such that Affects*(a1, a2) and Affects*(a2, a3) and Affects*(a3, a4)

5000
102 - Multiple :: Affects
assign a1, a2, a3, a4, a5, a6, a7, a8;
Select a1 such that Affects*(a1, a2) and Affects(a1, a3) and Affects*(a1, a4) and Affects(a1, a5) and Affects(a1, a6) and Affects*(a1, a7) and Affects(a1, a8)

5000
103 - Multiple :: Affects
assign a1, a2, a3, a4, a5, a6, a7, a8;
Select a1 such that Affects*(a1, a2) and Affects(a2, a3) and Affects*(a3, a4) and Affects(a4, a5) and Affects(a5, a6) and Affects*(a6, a7) and Affects(a7, a8) and Affects*(a8, a1)

5000
104 - Multiple :: Affects
assign a1, a2, a3, a4, a5, a6, a7, a8;
Select <a1, a4, a5, a8> such that Affects*(a1, a2) and Affects*(a3, a4) and Affects(a5, a6) and Affects(a7, a8)

5000
105 - Multiple :: Affects
assign a1, a2, a3;
Select a1 such that Affects*(a1, a2) and Affects*(a2, a1)

5000
106 - Multiple :: Affects
assign a1, a2, a3;
Select a1 such that Affects*(a1, a1)

5000