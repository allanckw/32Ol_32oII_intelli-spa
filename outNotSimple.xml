<?xml-stylesheet type="text/xsl" href="analysis.xsl"?>
<test_results>
<info>
<name>SPA</name><parsing_time_taken>1.000000</parsing_time_taken>
</info>
<queries>
<category name=" All Category">
<query>
<id z="1" comment="z" >1</id><querystr><![CDATA[stmt s1; assign a; variable v; procedure p; Select  v such that Modifies(a, v )]]></querystr>
<stuans>f,a,b,c,d,e,g</stuans>
<correct>a,b,c,d,e,f,g</correct>
<time_taken>4.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not 1" >2</id><querystr><![CDATA[stmt s1; assign a2; variable v; Select v such that !Modifies("Natalie", v)]]></querystr>
<stuans>g,f,x</stuans>
<correct>f,g,x</correct>
<time_taken>9.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="z No Relation mapping" >3</id><querystr><![CDATA[stmt s1; assign a2; variable v; Select s1 such that Modifies("Natalie", v)]]></querystr>
<stuans>1,2,3,4,5,6,7,8,9,10,11,12</stuans>
<correct>1,2,3,4,5,6,7,8,9,10,11,12</correct>
<time_taken>4.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not 3, does Natalie not modify any variable defined? yes f and g are not so s1 will still be given.." >4</id><querystr><![CDATA[stmt s1; assign a2; variable v; Select s1 such that !Modifies("Natalie", v)]]></querystr>
<stuans>1,2,6,4,8,5,12,11,10,3,7,9</stuans>
<correct>1,2,3,4,5,6,7,8,9,10,11,12</correct>
<time_taken>12.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not" >5</id><querystr><![CDATA[stmt s1; assign a; variable v; Select <a, v> such that Modifies(a, v)]]></querystr>
<stuans>9 f,1 a,3 b,4 c,6 d,7 e,8 e,10 g</stuans>
<correct>1 a,3 b,10 g,4 c,6 d,7 e,8 e,9 f</correct>
<time_taken>3.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not 5  - Assignment that does not modifiy any variable... Stupid query, all assignments will modify some variable" >6</id><querystr><![CDATA[stmt s1; assign a; variable v; Select <a, v> such that !Modifies(a, v)]]></querystr>
<stuans>4 e,7 a,1 e,4 d,6 e,9 a,4 g,1 c,6 f,9 b,4 f,1 b,4 b,6 g,9 c,1 g,9 x,4 a,9 d,1 x,6 a,9 e,6 b,1 f,6 c,9 g,7 b,7 c,1 d,7 f,7 g,3 a,3 c,3 x,3 d,6 x,3 e,3 f,3 g,4 x,8 c,10 e,8 a,10 f,8 f,7 x,10 c,8 b,10 b,10 x,7 d,10 d,8 d,8 g,10 a,8 x</stuans>
<correct></correct>
<time_taken>11.000000</time_taken>
<failed>
<missing></missing>
<additional>1 b,1 c,1 d,1 e,1 f,1 g,1 x,10 a,10 b,10 c,10 d,10 e,10 f,10 x,3 a,3 c,3 d,3 e,3 f,3 g,3 x,4 a,4 b,4 d,4 e,4 f,4 g,4 x,6 a,6 b,6 c,6 e,6 f,6 g,6 x,7 a,7 b,7 c,7 d,7 f,7 g,7 x,8 a,8 b,8 c,8 d,8 f,8 g,8 x,9 a,9 b,9 c,9 d,9 e,9 g,9 x</additional>
<summary>
<expected>0</expected>
<matched>0</matched>
<missing>0</missing>
<additional>56</additional>
</summary>
</failed>
</query>
<query>
<id z="1" comment="Not" >7</id><querystr><![CDATA[stmt s1; assign a; variable v; Select <a, v> such that Uses(a, v)]]></querystr>
<stuans>3 c,6 e,10 a</stuans>
<correct>3 c,6 e,10 a</correct>
<time_taken>3.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not 7  - Assignment that does not Use any variable (i.e. 1 does not use a, 1 does not use b, etc)" >8</id><querystr><![CDATA[stmt s1; assign a; variable v; Select <a, v> such that !Uses(a, v)]]></querystr>
<stuans>4 e,7 a,1 e,1 a,4 d,9 a,4 g,1 c,4 c,6 f,9 b,4 f,1 b,4 b,6 g,9 c,1 g,9 x,4 a,9 d,1 x,6 a,9 e,6 b,9 f,1 f,6 c,9 g,7 b,7 c,1 d,7 e,7 f,7 g,3 a,3 b,3 x,3 d,6 x,3 e,3 f,3 g,4 x,6 d,8 c,10 e,8 a,10 f,8 f,7 x,8 e,10 c,8 b,10 b,10 x,7 d,10 g,10 d,8 d,8 g,8 x</stuans>
<correct>1 a,1 b,1 c,1 d,1 e,1 f,1 g,4 a,4 b,4 c,4 d,4 e,4 f,4 g,8 a,8 b,8 c,8 d,8 e,8 f,8 g,9 a,9 b,9 c,9 d,9 e,9 f,9 g</correct>
<time_taken>8.000000</time_taken>
<failed>
<missing></missing>
<additional>1 x,10 b,10 c,10 d,10 e,10 f,10 g,10 x,3 a,3 b,3 d,3 e,3 f,3 g,3 x,4 x,6 a,6 b,6 c,6 d,6 f,6 g,6 x,7 a,7 b,7 c,7 d,7 e,7 f,7 g,7 x,8 x,9 x</additional>
<summary>
<expected>28</expected>
<matched>28</matched>
<missing>0</missing>
<additional>33</additional>
</summary>
</failed>
</query>
<query>
<id z="1" comment="z - Assignment that does not Use any variable QUERY IS UNDEFINE, what is the universe of variable not in the query, similar as DB Rule - you cannot select anything out of nothing lol" >9</id><querystr><![CDATA[stmt s1; assign a; variable v; Select v such that !Uses(a, v)]]></querystr>
<stuans>e,a,d,g,c,f,b,x</stuans>
<correct></correct>
<time_taken>8.000000</time_taken>
<failed>
<missing></missing>
<additional>a,b,c,d,e,f,g,x</additional>
<summary>
<expected>0</expected>
<matched>0</matched>
<missing>0</missing>
<additional>8</additional>
</summary>
</failed>
</query>
<query>
<id z="1" comment="Not 7  - Assignment that does not Use any variable" >10</id><querystr><![CDATA[stmt s1; assign a; variable v; Select a such that !Uses(a, v)]]></querystr>
<stuans>4,7,1,9,6,3,8,10</stuans>
<correct>1,4,8,9</correct>
<time_taken>10.000000</time_taken>
<failed>
<missing></missing>
<additional>10,3,6,7</additional>
<summary>
<expected>4</expected>
<matched>4</matched>
<missing>0</missing>
<additional>4</additional>
</summary>
</failed>
</query>
<query>
<id z="1" comment="Parent*" >11</id><querystr><![CDATA[stmt s1; Select s1 such that Parent*(s1, _)]]></querystr>
<stuans>5,11</stuans>
<correct>5,11</correct>
<time_taken>3.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Parent* Container statements cannot hold nth!" >12</id><querystr><![CDATA[stmt s1; Select s1 such that !Parent*(s1, _)]]></querystr>
<stuans>9,1,2,3,4,6,7,8,10,12</stuans>
<correct></correct>
<time_taken>3.000000</time_taken>
<failed>
<missing></missing>
<additional>1,10,12,2,3,4,6,7,8,9</additional>
<summary>
<expected>0</expected>
<matched>0</matched>
<missing>0</missing>
<additional>10</additional>
</summary>
</failed>
</query>
<query>
<id z="1" comment="Parent* Container statements cannot hold nth!" >13</id><querystr><![CDATA[stmt s2; Select s2 such that Parent*(_, s2)]]></querystr>
<stuans>6,7,8,12</stuans>
<correct>12,6,7,8</correct>
<time_taken>5.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Parent* Container statements cannot hold nth!" >14</id><querystr><![CDATA[stmt s2; Select s2 such that !Parent*(_, s2)]]></querystr>
<stuans>9,1,2,3,4,5,10,11</stuans>
<correct></correct>
<time_taken>4.000000</time_taken>
<failed>
<missing></missing>
<additional>1,10,11,2,3,4,5,9</additional>
<summary>
<expected>0</expected>
<matched>0</matched>
<missing>0</missing>
<additional>8</additional>
</summary>
</failed>
</query>
<query>
<id z="1" comment="Follows" >15</id><querystr><![CDATA[stmt s2; Select s2 such that Follows(_, s2)]]></querystr>
<stuans>2,3,5,7,10</stuans>
<correct>10,2,3,5,7</correct>
<time_taken>4.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Follows*" >16</id><querystr><![CDATA[stmt s2; Select s2 such that Follows*(_, s2)]]></querystr>
<stuans>2,3,5,7,10</stuans>
<correct>10,2,3,5,7</correct>
<time_taken>3.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not Follows" >17</id><querystr><![CDATA[stmt s2; Select s2 such that !Follows(_, s2)]]></querystr>
<stuans>9,1,4,6,8,11,12</stuans>
<correct>1,4,8,9,6,11,12</correct>
<time_taken>3.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not Follows*" >18</id><querystr><![CDATA[stmt s2; Select s2 such that !Follows*(_, s2)]]></querystr>
<stuans>9,1,4,6,8,11,12</stuans>
<correct>1,4,8,9,6,11,12</correct>
<time_taken>3.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Follows" >19</id><querystr><![CDATA[stmt s1, s2; Select s1 such that Follows(s1, s2)]]></querystr>
<stuans>1,2,4,6,9</stuans>
<correct>1,4,9,6,2</correct>
<time_taken>3.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Follows*" >20</id><querystr><![CDATA[stmt s1, s2; Select s1 such that Follows*(s1, _)]]></querystr>
<stuans>1,2,4,6,9</stuans>
<correct>1,4,9,6,2</correct>
<time_taken>4.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not Follows" >21</id><querystr><![CDATA[stmt s1, s2; Select s1 such that !Follows(s1,_)]]></querystr>
<stuans>12,8,5,3,7,11,10</stuans>
<correct>11,12,3,7,8,10,5</correct>
<time_taken>5.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not Follows*" >22</id><querystr><![CDATA[stmt s1, s2; Select s1 such that !Follows*(s1, _)]]></querystr>
<stuans>12,8,5,3,7,11,10</stuans>
<correct>11,12,3,7,8,10,5</correct>
<time_taken>4.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not Next*" >23</id><querystr><![CDATA[stmt s1; assign a2; Select s1 such that Next(s1, a2)]]></querystr>
<stuans>2,5,6,9</stuans>
<correct>2,5,6,9</correct>
<time_taken>3.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not Next" >24</id><querystr><![CDATA[stmt s1; assign a2; Select s1 such that !Next(s1, a2)]]></querystr>
<stuans>9,12,1,6,5,2,4,8,3,7,11,10</stuans>
<correct>1,3,4,7,8,10,11,12</correct>
<time_taken>4.000000</time_taken>
<failed>
<missing></missing>
<additional>2,5,6,9</additional>
<summary>
<expected>8</expected>
<matched>8</matched>
<missing>0</missing>
<additional>4</additional>
</summary>
</failed>
</query>
<query>
<id z="1" comment="Not Next*" >25</id><querystr><![CDATA[stmt s1; assign a2; Select a2 such that Next(s1, a2)]]></querystr>
<stuans>3,6,7,8,10</stuans>
<correct>10,3,6,7,8</correct>
<time_taken>4.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Not Next" >26</id><querystr><![CDATA[stmt s1; assign a2; Select a2 such that !Next(s1, a2)]]></querystr>
<stuans>9,7,1,6,8,10,3,4</stuans>
<correct>1,4,9</correct>
<time_taken>4.000000</time_taken>
<failed>
<missing></missing>
<additional>10,3,6,7,8</additional>
<summary>
<expected>3</expected>
<matched>3</matched>
<missing>0</missing>
<additional>5</additional>
</summary>
</failed>
</query>
<query>
<id z="1" comment="Constant selection - !Next is false as there exist some answer, so return none (as universe is infinite - {1, 3 ,4})" >27</id><querystr><![CDATA[constant c; Select c such that !Next(s1, a2)]]></querystr>
<stuans>1,4,3</stuans>
<correct></correct>
<time_taken>3.000000</time_taken>
<failed>
<missing></missing>
<additional>1,3,4</additional>
<summary>
<expected>0</expected>
<matched>0</matched>
<missing>0</missing>
<additional>3</additional>
</summary>
</failed>
</query>
<query>
<id z="1" comment="Constant Selection There exist some results so constant is returned" >28</id><querystr><![CDATA[constant c; Select c such that Parent*(_, _) ]]></querystr>
<stuans>1,4,3</stuans>
<correct>1,3,4</correct>
<time_taken>2.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="Constant Selection !Parent*(_, _) is false as there isnt any result so constant is returned" >29</id><querystr><![CDATA[constant c; Select c such that !Parent*(_, _)]]></querystr>
<stuans></stuans>
<correct>1,3,4</correct>
<time_taken>4.000000</time_taken>
<failed>
<missing>1,3,4</missing>
<additional></additional>
<summary>
<expected>3</expected>
<matched>0</matched>
<missing>3</missing>
<additional>0</additional>
</summary>
</failed>
</query>
<query>
<id Z="1" comment="Sibling" >30</id><querystr><![CDATA[assign a1, a2; Select <a1, a2> such that Sibling(a1, a2)]]></querystr>
<stuans>9 10,1 3,3 1,6 7,7 6,10 9</stuans>
<correct>1 3,10 9,3 1,6 7,7 6,9 10</correct>
<time_taken>3.000000</time_taken>
<passed/>
</query>
<query>
<id Z="1" comment="Sibling - Gheyest query to not a sibling" >31</id><querystr><![CDATA[assign a1, a2; Select <a1, a2> such that !Sibling(a1, a2)]]></querystr>
<stuans>6 6,9 1,1 9,1 1,9 9,4 6,6 4,9 3,6 3,9 4,6 1,9 6,9 7,9 8,1 4,6 9,1 6,6 8,1 7,4 10,1 8,1 10,3 9,3 3,3 4,8 10,3 6,3 7,3 8,3 10,4 9,10 8,4 1,7 8,6 10,4 3,4 4,4 7,10 1,7 3,4 8,7 9,10 3,7 1,10 6,7 4,10 4,7 7,7 10,8 9,8 1,8 3,8 4,8 6,8 7,8 8,10 7,10 10</stuans>
<correct>1 4,1 6,1 7,1 8,1 9,1 10,3 4,3 6,3 7,3 8,3 9,3 10,4 1,4 3,4 6,4 7,4 8,4 9,4 10,6 1,6 3,6 4,6 8,6 9,6 10,7 1,7 3,7 4,7 8,7 9,7 10,8 1,8 3,8 4,8 6,8 7,8 9,8 10,9 1,9 3,9 4,9 6,9 7,9 8,10 1,10 3,10 4,10 6,10 7,10 8</correct>
<time_taken>4.000000</time_taken>
<failed>
<missing></missing>
<additional>1 1,10 10,3 3,4 4,6 6,7 7,8 8,9 9</additional>
<summary>
<expected>50</expected>
<matched>50</matched>
<missing>0</missing>
<additional>8</additional>
</summary>
</failed>
</query>
<query>
<id Z="1" comment="Sibling -" >32</id><querystr><![CDATA[stmt s1, s2; Select s1 such that !Sibling(s1, s2)]]></querystr>
<stuans>1,4,12,8,5,2,3,6,7,11,9,10</stuans>
<correct>8,11,12</correct>
<time_taken>7.000000</time_taken>
<failed>
<missing></missing>
<additional>1,10,2,3,4,5,6,7,9</additional>
<summary>
<expected>3</expected>
<matched>3</matched>
<missing>0</missing>
<additional>9</additional>
</summary>
</failed>
</query>
<query>
<id Z="1" comment="Sibling -" >33</id><querystr><![CDATA[stmt s1, s2; Select s1 such that Sibling(s1, s2)]]></querystr>
<stuans>1,2,3,4,5,6,7,9,10</stuans>
<correct>1,2,3,4,5,6,7,9,10</correct>
<time_taken>5.000000</time_taken>
<passed/>
</query>
<query>
<id Z="1" comment="some ands" >34</id><querystr><![CDATA[variable v; stmt s1; Select s1 such that !Modifies("Natalie", v) and Follows*(s1, _)]]></querystr>
<stuans>6,9,1,2,4</stuans>
<correct>1,4,9,6,2</correct>
<time_taken>8.000000</time_taken>
<passed/>
</query>
<query>
<id z="1" comment="z" >35</id><querystr><![CDATA[stmt s1; assign a; variable v; procedure p; Select  v such that Modifies("Natalie", v ) with v.varName = "a"]]></querystr>
<stuans>a</stuans>
<correct>a</correct>
<time_taken>6.000000</time_taken>
<passed/>
</query>
<query>
<id Z="1" comment="some ands" >36</id><querystr><![CDATA[variable v; stmt s1; Select s1 such that !Modifies("Natalie", v) and Follows*(s1, _) with v.varName = "x"]]></querystr>
<stuans>9,1,2,4,6</stuans>
<correct></correct>
<time_taken>6.000000</time_taken>
<failed>
<missing></missing>
<additional>1,2,4,6,9</additional>
<summary>
<expected>0</expected>
<matched>0</matched>
<missing>0</missing>
<additional>5</additional>
</summary>
</failed>
</query>
<query>
<id Z="1" comment="some ands" >37</id><querystr><![CDATA[variable v; stmt s1; Select s1 such that Modifies("Natalie", v) or Follows*(s1, _) with v.varName = "x"]]></querystr>
<stuans>1,2,3,4,5,6,7,8,9,10,11,12,1,2,4,6,9</stuans>
<correct>1,2,3,4,5,6,7,8,9,10,11,12</correct>
<time_taken>5.000000</time_taken>
<passed/>
</query>
</category>
</queries>
</test_results>
