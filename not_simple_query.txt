35
cat: All Category
1 - z :: z
stmt s1; assign a; variable v; procedure p;
Select  v such that Modifies("Natalie", v )
a, b, c, d, e
5000
2 - z :: Not 1
stmt s1; assign a2; variable v;
Select v such that !Modifies("Natalie", v)
f, g, x
5000
3 - z :: z No Relation mapping
stmt s1; assign a2; variable v;
Select s1 such that Modifies("Natalie", v)
1,2,3,4,5,6,7,8,9,10,11,12
5000
4 - z :: Not 3, does Natalie not modify any variable defined? yes f and g are not so s1 will still be given..
stmt s1; assign a2; variable v;
Select s1 such that !Modifies("Natalie", v)
1,2,3,4,5,6,7,8,9,10,11,12
5000
5 - z :: Not
stmt s1; assign a; variable v;
Select <a, v> such that Modifies(a, v)
1 a, 3 b, 10 g,4 c,6 d,7 e,8 e,9 f
5000
6 - z :: Not 5  - Assignment that does not modifiy any variable... Stupid query, all assignments will modify some variable
stmt s1; assign a; variable v;
Select <a, v> such that !Modifies(a, v)

5000
7 - z :: Not
stmt s1; assign a; variable v;
Select <a, v> such that Uses(a, v)
3 c, 6 e, 10 a
5000
8 - z :: Not 7  - Assignment that does not Use any variable (i.e. 1 does not use a, 1 does not use b, etc)
stmt s1; assign a; variable v;
Select <a, v> such that !Uses(a, v)
1 a, 1 b, 1 c, 1 d, 1 e, 1 f, 1 g, 4 a, 4 b, 4 c, 4 d, 4 e, 4 f, 4 g, 8 a, 8 b, 8 c, 8 d, 8 e, 8 f, 8 g, 9 a, 9 b, 9 c, 9 d, 9 e, 9 f, 9 g 
5000
9 - z :: z - Assignment that does not Use any variable QUERY IS UNDEFINE, what is the universe of variable not in the query, similar as DB Rule - you cannot select anything out of nothing lol
stmt s1; assign a; variable v;
Select v such that !Uses(a, v)

5000
10 - z :: Not 7  - Assignment that does not Use any variable 
stmt s1; assign a; variable v;
Select a such that !Uses(a, v)
1, 4, 8, 9
5000
11 - z :: Parent*
stmt s1;
Select s1 such that Parent*(s1, _)
5, 11
5000
12 - z :: Parent* Container statements cannot hold nth!
stmt s1;
Select s1 such that !Parent*(s1, _)

5000
13 - z :: Parent* Container statements cannot hold nth!
stmt s2;
Select s2 such that Parent*(_, s2)
12,6,7,8
5000
14 - z :: Parent* Container statements cannot hold nth!
stmt s2;
Select s2 such that !Parent*(_, s2)

5000
15 - z :: Follows
stmt s2;
Select s2 such that Follows(_, s2)
10,2,3,5,7
5000
16 - z :: Follows* 
stmt s2;
Select s2 such that Follows*(_, s2)
10,2,3,5,7
5000
17 - z :: Not Follows
stmt s2;
Select s2 such that !Follows(_, s2)
1, 4, 8, 9, 6, 11, 12
5000
18 - z :: Not Follows* 
stmt s2;
Select s2 such that !Follows*(_, s2)
1, 4, 8, 9, 6, 11, 12
5000
19 - z :: Follows
stmt s1, s2;
Select s1 such that Follows(s1, s2)
1, 4, 9, 6, 2
5000
20 - z :: Follows* 
stmt s1, s2;
Select s1 such that Follows*(s1, _)
1, 4, 9, 6, 2
5000
21 - z :: Not Follows
stmt s1, s2;
Select s1 such that !Follows(s1,_)
11, 12, 3, 7, 8, 10, 5
5000
22 - z :: Not Follows* 
stmt s1, s2;
Select s1 such that !Follows*(s1, _)
11, 12, 3, 7, 8, 10, 5
5000
23 - z :: Not Next* 
stmt s1; assign a2;
Select s1 such that Next(s1, a2)
2,5,6,9
5000
24 - z :: Not Next 
stmt s1; assign a2;
Select s1 such that !Next(s1, a2)
1, 3, 4, 7, 8, 10, 11, 12
5000
25 - z :: Not Next* 
stmt s1; assign a2;
Select a2 such that Next(s1, a2)
10, 3, 6, 7, 8
5000
26 - z :: Not Next 
stmt s1; assign a2;
Select a2 such that !Next(s1, a2)
1, 4, 9
5000
27 - z :: Constant selection - !Next is false as there exist some answer, so return none (as universe is infinite - {1, 3 ,4})
constant c;
Select c such that !Next(s1, a2)

5000
28 - z :: Constant Selection There exist some results so constant is returned
constant c;
Select c such that Parent*(_, _) 
1, 3, 4
5000
29 - z :: Constant Selection !Parent*(_, _) is false as there isnt any result so constant is returned
constant c;
Select c such that !Parent*(_, _)
1, 3, 4
5000
30 - Z :: Sibling
assign a1, a2;
Select <a1, a2> such that Sibling(a1, a2)
1 3,10 9,3 1,6 7,7 6,9 10
5000
31 - Z :: Sibling - Gheyest query to not a sibling
assign a1, a2;
Select <a1, a2> such that !Sibling(a1, a2)
1 4, 1 6, 1 7, 1 8, 1 9, 1 10, 3 4, 3 6, 3 7, 3 8, 3 9, 3 10, 4 1, 4 3, 4 6, 4 7, 4 8, 4 9, 4 10, 6 1, 6 3, 6 4, 6 8, 6 9, 6 10, 7 1, 7 3, 7 4, 7 8, 7 9, 7 10, 8 1, 8 3, 8 4, 8 6, 8 7, 8 9, 8 10, 9 1, 9 3, 9 4, 9 6, 9 7, 9 8, 10 1, 10 3, 10 4, 10 6, 10 7, 10 8
5000
32 - Z :: Sibling - 
stmt s1, s2;
Select s1 such that !Sibling(s1, s2)
8, 11, 12
5000
33 - Z :: Sibling - 
stmt s1, s2;
Select s1 such that Sibling(s1, s2)
1, 2, 3, 4, 5, 6, 7, 9, 10
5000
34 - Z :: some ands
variable v; stmt s1;
Select s1 such that !Modifies("Natalie", v) and Follows*(s1, _)
1, 4, 9, 6, 2
5000
35 - z :: z
stmt s1; assign a; variable v; procedure p;
Select  v such that Modifies("Natalie", v ) with v.varName = "a"
a
5000
36 - Z :: some ands
variable v; stmt s1;
Select s1 such that !Modifies("Natalie", v) and Follows*(s1, _) with v.varName = "x"

5000
37 - Z :: some ands
variable v; stmt s1;
Select s1 such that Modifies("Natalie", v) or Follows*(s1, _) with v.varName = "x"
1,2,3,4,5,6,7,8,9,10,11,12
5000